<?php

/**
 * @file
 * QuoteDown module.
 */

/**
 * PageDown field widget key.
 */
const QUOTEDOWN_WIDGET_PAGEDOWN = 'pagedown';

/**
 * Force comment bodies to use PageDown variable name.
 */
const QUOTEDOWN_VAR_OVERRIDE_COMMENT = 'quotedown_replace_all_comment_bodies';

/**
 * Disabled node types variable name.
 */
const QUOTEDOWN_VAR_DISABLED_NODE_TYPE = 'quotedown_disabled_node_types';

/**
 * QuoteDown string context for translation.
 */
const QUOTEDOWN_CTX = 'quotedown';

/**
 * Implements hook_theme().
 */
function quotedown_theme() {
  return array('pagedown' => array('render element' => 'element'));
}

/**
 * Build an arbitrary quote link.
 *
 * @param string $id
 *   Target CSS identifier.
 * @param string $title
 *   Title if different from "Quote".
 *
 * @return array
 *   Link array.
 */
function quotedown_quote_link_build($id, $title = null, $cid = null, $inputKey = null) {
  if (!$title) {
    $title = t("quote", array(), array('context' => QUOTEDOWN_CTX));
  }
  return array(
    'title' => $title,
    'href'  => '#',
    'html'  => false,
    'attributes' => array(
      'class' => array('magiquote'),
      'data-cid' => $cid,
      'data-target' => $id,
      'data-input' => $inputKey,
    ),
  );
}

/**
 * Implements hook_node_view_alter().
 */
function quotedown_node_view_alter(&$build) {
  if (module_exists('comment')) {
    if (COMMENT_NODE_OPEN != $build['#node']->comment) {
      return;
    }
  }
  if (in_array($build['#node']->type, variable_get(QUOTEDOWN_VAR_DISABLED_NODE_TYPE, array())) || empty($build['comments'])) {
    return;
  }
  $id = uniqid("quote-", true);
  $build['links']['comment']['#links']['magiquote'] = quotedown_quote_link_build($id);
  // Suboptimal I sure hope the account is preloaded elsewhere.
  $account = user_load($build['#node']->uid);
  $date = $build['#node']->created;
  $build['body']['#attributes']['id'] = $id;
  // Title will serve for JS to put a header before quote.
  $build['body']['#attributes']['data-title'] = t("On @date, @account said", array('@date' => format_date($date), '@account' => format_username($account)));
}

/**
 * Implements hook_comment_view_alter().
 */
function quotedown_comment_view_alter(&$build) {
  $cid = $build['#comment']->cid;
  $id = "quote-" . $cid;
  $build['links']['comment']['#links']['magiquote'] = quotedown_quote_link_build($id, null, $cid, 'comment-' . $build['#comment']->nid);
  $build['links']['comment']['#links']['comment-reply']['attributes']['data-cid'] = $cid;
  $build['links']['comment']['#links']['comment-reply']['attributes']['class'][] = 'magireply';
  // Suboptimal I sure hope the account is preloaded elsewhere.
  $account = user_load($build['#comment']->uid);
  $date = $build['#comment']->created;
  $build['comment_body']['#attributes']['id'] = $id;
  // Title will serve for JS to put a header before quote.
  $build['comment_body']['#attributes']['data-title'] = t("On @date, @account said", array('@date' => format_date($date), '@account' => format_username($account)));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function quotedown_form_comment_form_alter(&$form, &$form_state) {
  // Just change 'pid' field from value to hidden.
  $form['pid'] = array('#type' => 'hidden', '#default_value' => $form['pid']['#value']);
  unset($form['pid']['#value']);
  $form['actions']['preview']['#access'] = false;
  $form['comment_body'][LANGUAGE_NONE][0]['#attributes']['data-input'] = 'comment-' . $form['#node']->nid;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function quotedown_preprocess_field(&$variables) {
  // Attributes you might set on a field render array will not be propagated
  // to the template per default: this actually forces it.
  if (!empty($variables['element']['#attributes'])) {
    if (empty($variables['attributes_array'])) {
      $variables['attributes_array'] = $variables['element']['#attributes'];
    } else{
      $variables['attributes_array'] = drupal_array_merge_deep($variables['element']['#attributes'], $variables['attributes_array']);
    }
  }
}

/**
 * Implements hook_page_build().
 */
function quotedown_page_build(&$page) {
  drupal_add_library('quotedown', 'jquery.magitext', true);
  drupal_add_library('quotedown', 'quotedown', true);
  drupal_add_js(array(
    'PageDown' => array(
      "Locale" => quotedown_pagedown_locale_string_get(),
    ),
  ), 'setting');
}

/**
 * Get localized strings for the PageDown editor.
 *
 * @return string[]
 *   Keys are PageDown identifiers values are translated strings.
 */
function quotedown_pagedown_locale_string_get() {
  return array(
    'bold' => t("Strong <strong> Ctrl+B"),
    'boldexample' => t("strong text"),
    'italic' => t("Emphasis <em> Ctrl+I"),
    'italicexample' => t("emphasized text"),
    'link' => t("Hyperlink <a> Ctrl+L"),
    'linkdescription' => t("enter link description here"),
    'linkdialog' => t("<p><b>Insert Hyperlink</b></p><p>http://example.com/ \"optional title\"</p>"),
    'quote' => t("Blockquote <blockquote> Ctrl+Q"),
    'quoteexample' => t("Blockquote"),
    'code' => t("Code Sample <pre><code> Ctrl+K"),
    'codeexample' => t("enter code here"),
    'image' => t("Image <img> Ctrl+G"),
    'imagedescription' => t("enter image description here"),
    'imagedialog' => t("<p><b>Insert Image</b></p><p>http://example.com/images/diagram.jpg \"optional title\"<br><br>Need <a href='http://www.google.com/search?q=free+image+hosting' target='_blank'>free image hosting?</a></p>"),
    'olist' => t("Numbered List <ol> Ctrl+O"),
    'ulist' => t("Bulleted List <ul> Ctrl+U"),
    'litem' => t("List item"),
    'heading' => t("Heading <h1>/<h2> Ctrl+H"),
    'headingexample' => t("Heading"),
    'hr' => t("Horizontal Rule <hr> Ctrl+R"),
    'undo' => t("Undo - Ctrl+Z"),
    'redo' => t("Redo - Ctrl+Y"),
    'redomac' => t("Redo - Ctrl+Shift+Z"),
    'help' => t("Markdown Editing Help"),
  );
}

/**
 * Implements hook_library().
 */
function quotedown_library() {
  $path = drupal_get_path('module', 'quotedown') . '/js';
  $opts = array('weight' => 3);
  return array(
    'jquery.compat' => array(
      'title' => "jQuery Compat",
      'title' => "jQuery 1.7 bits for 1.4 and jQuery.autoresize",
      'version' => '0.1',
      'website' => "http://github.com/makinacorpus/drupal-quotedown",
      'js' => array(
        $path . '/jquery.compat.js' => $opts,
      ),
    ),
    'jquery.autosize' => array(
      'title' => "jQuery Autosize",
      'version' => '1.18.1',
      'website' => "http://www.jacklmoore.com/autosize",
      'js' => array(
        $path . '/jquery.autosize-1.18.1.min.js' => $opts,
      ),
      'dependencies' => array(
        array('quotedown', 'jquery.compat'),
      ),
    ),
    'pagedown' => array(
      'title' => "PageDown",
      'version' => '0.1',
      'website' => "http://code.google.com/p/pagedown",
      'js' => array(
        $path . '/pagedown/Markdown.Converter.js' => $opts,
        $path . '/pagedown/Markdown.Sanitizer.js' => $opts,
        $path . '/pagedown/Markdown.Editor.js'    => $opts,
      ),
      'css' => array(
        $path . '/pagedown/demo/browser/demo.css' => $opts,
      ),
    ),
    'jquery.magitext' => array(
      'title' => "jQuery Magitext",
      'version' => '0.1',
      'website' => "http://github.com/makinacorpus/drupal-quotedown",
      'js' => array(
        $path . '/jquery.magitext.js' => $opts,
      ),
      'css' => array(
        $path . '/jquery.magitext.css' => $opts,
      ),
      'dependencies' => array(
        array('quotedown', 'jquery.autosize'),
        array('quotedown', 'pagedown'),
      ),
    ),
    'quotedown' => array(
      'title' => "QuoteDown",
      'version' => '0.1',
      'website' => "http://github.com/makinacorpus/drupal-quotedown",
      'js' => array(
        $path . '/quotedown.js' => $opts,
      ),
      'dependencies' => array(
        array('quotedown', 'pagedown'),
      ),
    ),
  );
}

/**
 * Implements hook_filter_info().
 */
function quotedown_filter_info() {
  return array(
    'qmarkdown' => array(
      'title'            => t('Markdown'),
      'description'      => t('Markdown text will be formatted as HTML.'),
      'process callback' => 'quotedown_filter_process_qmarkdown',
    ),
  );
}

/**
 * Filter process callback.
 */
function quotedown_filter_process_qmarkdown($text, $format) {
  if (!empty($text)) {
    if (!class_exists('\Michelf\Markdown')) {
      // You should use the autoloader module instead.
      // http://github.com/makinacorpus/drupal-autoloader
      require_once __DIR__ . '/lib/Michelf/Markdown.inc.php';
    }
    $m = new \Michelf\Markdown();
    return $m->transform($text);
  }
  return $text;
}

/**
 * Implements hook_element_info_alter().
 */
function quotedown_element_info_alter(&$type) {
  $default = array(
    // Set this to false to deactivate the magitext behavior.
    '#magitext' => true,
    // Set this to true will activate the pagedown editor.
    '#pagedown' => false,
  );
  if (isset($type['text_format'])) {
    $type['text_format'] += $default;
    // This is a default safe behavior: force our input format that
    // will handle markdown seamlessly. If any user wants to force
    // his own format he just can set #forceformat to false on his
    // element instance.
    $type['text_format']['#forceformat'] = 'qmarkdown';
    // Preprocess will override the format and let the filter module
    // do whatever it has to do with while postprocess will alter the
    // widget and set some options of us to the inside textarea. This
    // avoid element ordering to messed up.
    array_unshift($type['text_format']['#process'], 'quotedown_element_preprocess_text_format');
    $type['text_format']['#process'][] = 'quotedown_element_process_text_format';
  }
  if (isset($type['textarea'])) {
    $type['textarea'] += $default;
    $type['textarea']['#process'][] = 'quotedown_element_process_textarea';
  }
}

/**
 * Preprocesses 'text_format' elements.
 */
function quotedown_element_preprocess_text_format($element) {
  if ($element['#pagedown'] && !empty($element['#forceformat'])) {
    $element['#format'] = $element['#forceformat'];
  }
  return $element;
}

/**
 * Processes 'text_format' elements.
 */
function quotedown_element_process_text_format($element) {
  if ($element['#pagedown'] && !empty($element['#forceformat'])) {
    $element['format']['format']['#access'] = false;
    $element['format']['guidelines']['#access'] = false;
  }
  $element['value']['#pagedown'] = $element['#pagedown'];
  $element['value']['#magitext'] = $element['#magitext'];
  return $element;
}

/**
 * Processes 'textarea' elements.
 */
function quotedown_element_process_textarea($element) {
  static $id = 0;

  if ($element['#magitext']) {
    $element['#rows'] = 3;
    $element['#resizable'] = false;
    $element['#attributes']['class'][] = "magitext";
  }

  if ($element['#pagedown']) {
    $currentId = ++$id;
    $element['#id'] = 'wmd-input-' . $currentId;
    $element['#postfix'] = $currentId;
    $element['#attached']['js'][] = array(
      'data' => array('PageDown' => array('List' => array($currentId))),
      'type' => 'setting',
    );
    $element['#attributes']['class'][] = 'wmd-input';
    $element['#theme'] = 'pagedown';
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function quotedown_field_widget_info() {
  return array(
    QUOTEDOWN_WIDGET_PAGEDOWN => array(
      'label'       => t("PageDown editor"),
      'settings'    => array('format' => 'qmarkdown'),
      'description' => t("Uses the PageDown MarkDown editor on a simple textarea."),
      'field types' => array('text', 'text_long', 'text_with_summary'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function quotedown_field_widget_form(
  &$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element)
{
  switch ($instance['widget']['type']) {

    case QUOTEDOWN_WIDGET_PAGEDOWN:
      $element['#type'] = 'text_format';
      $element['#magitext'] = true;
      $element['#pagedown'] = true;
      $element['#default_value'] = isset($items[$delta]['value']) ? $items[$delta]['value'] : null;
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_properties_alter().
 */
function quotedown_field_widget_properties_alter(&$widget, $context) {
  if (variable_get(QUOTEDOWN_VAR_OVERRIDE_COMMENT, false)) {
    $field = $context['field'];
    if (('comment' === $context['entity_type']) && ('comment_body' === $field['field_name'])) {
      // Force our widget on all comments bodies.
      $widget['type'] = QUOTEDOWN_WIDGET_PAGEDOWN;
      $widget['module'] = 'quotedown';
    }
  }
}

/**
 * Theme a pagedown form element.
 * Slightly modified version of theme_textarea().
 */
function theme_pagedown($variables) {
  $element = $variables['element'];
  $currentId = $element['#postfix'];

  element_set_attributes($element, array('id', 'name', 'cols', 'rows'));
  _form_set_class($element, array('form-textarea'));
  $wrapper_attributes = array(
    'class' => array('form-textarea-wrapper', 'wmd-panel'),
    'id' => 'wmd-panel-' . $currentId,
  );

  $output = '<div' . drupal_attributes($wrapper_attributes) . '>';
  $output .= '<div class="wmd-button-bar" id="wmd-button-bar-' . $currentId . '"></div>';
  $output .= '<textarea' . drupal_attributes($element['#attributes']) . '>' . check_plain($element['#value']) . '</textarea>';
  $output .= '<div class="wmd-panel wmd-preview" id="wmd-preview-' . $currentId . '"></div>';
  $output .= '</div>';

  return $output;
}
